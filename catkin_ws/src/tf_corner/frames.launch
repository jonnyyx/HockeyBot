<launch>
	<param name="/use_sim_time" value="true"/>

	<!-- Settings / Map files -->
	<arg name="map_file" default="$(find turtle_stopper)/world/maze.yaml" />
	<arg name="world_file" default="$(find turtle_stopper)/world/maze.world" />
	<arg name="base"       default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
	<arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
	<arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR asus_xtion_pro)"/>  <!-- kinect, asus_xtion_pro -->

	<!-- Provide the exact position of our robot in stage to ROS nodes -->
        <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
          <param name="odom_frame_id" value="odom" />
          <param name="base_frame_id" value="base_link" />
        </node>

	<!-- Load the turtlebot robot model for RViz et al. -->
	<include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
		<arg name="base" value="$(arg base)" />
		<arg name="stacks" value="$(arg stacks)" />
		<arg name="3d_sensor" value="$(arg 3d_sensor)" />
	</include>
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<param name="use_gui" value="false"/>
	</node>

	<!-- Start the actual simulator -->
	<node name="stage" pkg="stage_ros" type="stageros" args="$(arg world_file)">
		<!-- Map the default laser scan to rplidar -->
		<remap from="base_scan_1" to="base_scan" />
	</node>

        <!--node pkg="tf" type="static_transform_publisher" name="static_trafo" args="-11.28 23.27 0 0 0 0 odom map 100"/-->    

	<!-- Let the simulated robot do something -->
	<node name="stopper" pkg="turtle_stopper" type="stopper" output="screen" />
	
	<!-- Building the tf frames -->
	<node pkg="tf_corner" type="tf_corner" name="corner1_broad" output="screen" args="corner1" />
	<node pkg="tf_corner" type="tf_corner" name="corner2_broad" output="screen" args="corner2" />
	<node pkg="tf_corner" type="tf_corner" name="corner3_broad" output="screen" args="corner3" />
	<node pkg="tf_corner" type="tf_corner" name="corner4_broad" output="screen" args="corner4" />
	
	<!-- Building the node sending calibration topics -->
	<node pkg="tf_corner" type="sendCalibration" name="sendCalibration" output="screen" />

</launch>